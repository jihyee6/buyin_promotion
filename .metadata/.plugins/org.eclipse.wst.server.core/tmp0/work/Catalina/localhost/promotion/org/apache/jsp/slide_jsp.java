/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.54
 * Generated at: 2022-10-12 06:43:56 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class slide_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<script type=\"text/javascript\" src=\"https://code.jquery.com/jquery-latest.min.js\"></script>\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/npm/slick-carousel@1.8.1/slick/slick.css\"/>\r\n");
      out.write("<script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/slick-carousel@1.8.1/slick/slick.min.js\"></script>\r\n");
      out.write("\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<div class=\"slider-wrap\">\r\n");
      out.write("	    <div class=\"cont\">\r\n");
      out.write("	    	<img class='bannerImg' src='image/card/purchase.png'>\r\n");
      out.write("	    </div>\r\n");
      out.write("	    <div class=\"cont\">\r\n");
      out.write("	    	<img class='bannerImg' src='image/card/store.png'>\r\n");
      out.write("	    </div>\r\n");
      out.write("	    <div class=\"cont\">\r\n");
      out.write("	    	<img class='bannerImg' src='image/card/buyinhotel.png'>\r\n");
      out.write("	    </div>\r\n");
      out.write("	    <div class=\"cont\">\r\n");
      out.write("	    	<img class='bannerImg' src='image/card/gift.png'>\r\n");
      out.write("	    </div>\r\n");
      out.write("	    <div class=\"cont\">\r\n");
      out.write("	    	<img class='bannerImg' src='image/card/araGiftcard.png'>\r\n");
      out.write("	    </div>\r\n");
      out.write("	</div>\r\n");
      out.write("	\r\n");
      out.write("	<script type=\"text/javascript\">\r\n");
      out.write("	$(function(){\r\n");
      out.write("	    $('.slider-wrap').slick({\r\n");
      out.write("	      slide: 'div',        //슬라이드 되어야 할 태그\r\n");
      out.write("	      infinite : true,     //무한 반복 옵션     \r\n");
      out.write("	      slidesToShow : 1,        // 한 화면에 보여질 컨텐츠 개수\r\n");
      out.write("	      slidesToScroll : 1,        //스크롤 한번에 움직일 컨텐츠 개수\r\n");
      out.write("	      speed : 500,     // 다음 버튼 누르고 다음 화면 뜨는데까지 걸리는 시간(ms)\r\n");
      out.write("	      arrows : true,         // 옆으로 이동하는 화살표 표시 여부\r\n");
      out.write("	      dots : true,         // 스크롤바 아래 점으로 페이지네이션 여부\r\n");
      out.write("	      autoplay : false,            // 자동 스크롤 사용 여부\r\n");
      out.write("	      //autoplaySpeed : 2000,         // 자동 스크롤 시 다음으로 넘어가는데 걸리는 시간 (ms)\r\n");
      out.write("	      pauseOnHover : true,        // 슬라이드 이동    시 마우스 호버하면 슬라이더 멈추게 설정\r\n");
      out.write("	      vertical : false,        // 세로 방향 슬라이드 옵션\r\n");
      out.write("	      prevArrow : \"<button type='button' class='slick-prev'><img src='image/icon/left.png'></button>\",\r\n");
      out.write("	      nextArrow : \"<button type='button' class='slick-next'><img src='image/icon/right.png'></button>\",\r\n");
      out.write("	      draggable : true,     //드래그 가능 여부 \r\n");
      out.write("	      responsive: [ // 반응형 웹 구현 옵션\r\n");
      out.write("	        {  \r\n");
      out.write("	          breakpoint: 960, //화면 사이즈 960px\r\n");
      out.write("	          settings: {\r\n");
      out.write("	            slidesToShow: 1\r\n");
      out.write("	          } \r\n");
      out.write("	        },\r\n");
      out.write("	        { \r\n");
      out.write("	          breakpoint: 768, //화면 사이즈 768px\r\n");
      out.write("	          settings: {    \r\n");
      out.write("	            slidesToShow: 1\r\n");
      out.write("	          } \r\n");
      out.write("	        }\r\n");
      out.write("	      ]\r\n");
      out.write("\r\n");
      out.write("	    });\r\n");
      out.write("	})\r\n");
      out.write("	\r\n");
      out.write("	//$('#slider-div').slick('goTo', index);\r\n");
      out.write("	</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
